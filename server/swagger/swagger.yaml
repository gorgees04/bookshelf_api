openapi: "3.0.0"
info:
  title: "Bookshelf API Documentation"
  version: "1.0.0"
  description: >
    Introducing Bookshelf API: Explore, Collect, Share. Your go-to for storing and sharing your favorite books. <br/> <br/>
    The server was built with `Express` and `PostgreSQL`, employing `JWT` for authentication, storing tokens securely in `HTTP-only` cookies. <br/>
    To improve security, consider setting security headers, implementing token expiration, adding token revocation, managing secrets securely, <br/> 
    validating user input, implementing rate limiting, and setting up logging and monitoring. <br/>
  contact:
    name: "Gorgees Odisho"
    email: "gorgees041@gmail.com"
    url: "https://gorgees.vercel.app/"
servers:
  - url: "http://localhost:3000/api"

# tages
tags:
  - name: "public books"
    description: "Get all public books that users published"
  - name: "Authentication"
    description: "Login/Signup to be able to (add, delete update) books & Logout "
  - name: "user"
    description: "Create/Update/delete book"

# paths
paths:
  # 1) /books
  /books/public:
    get:
      tags:
        - "public books"
      summary: "Get all public books + pagination"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: number of limit of books to show
        - in: query
          name: offset
          schema:
            type: integer
          description: number of page (limit * offset)
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  book_id:
                    type: "string"
                  book_name:
                    type: "string"
                  description:
                    type: "string"
                  book_url:
                    type: "string"
                  file_path:
                    type: "string"
                  status:
                    type: "string"
                  author_name:
                    type: "string"
                  genre:
                    type: "string"
                  user:
                    type: "object"
                    properties:
                      user_id:
                        type: "string"
                      first_name:
                        type: "string"
                      last_name:
                        type: "string"
                      email:
                        type: "string"

  /books/public/{bookId}:
    get:
      tags:
        - "public books"
      summary: "Get single book by id"
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
          description: get a single book by book id
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  book_id:
                    type: "string"
                  book_name:
                    type: "string"
                  description:
                    type: "string"
                  book_url:
                    type: "string"
                  file_path:
                    type: "string"
                  status:
                    type: "string"
                  author_name:
                    type: "string"
                  genre:
                    type: "string"
                  user:
                    type: "object"
                    properties:
                      user_id:
                        type: "string"
                      first_name:
                        type: "string"
                      last_name:
                        type: "string"
                      email:
                        type: "string"

  # public books search
  /books/public/search:
    get:
      tags:
        - "public books"
      summary: "search for public books (book name or author name) + pagination"
      parameters:
        - in: query
          name: bookOrAuthor
          schema:
            type: string
          description: search for book by book name or author name
        - in: query
          name: limit
          schema:
            type: integer
          description: number of limit of books to show
        - in: query
          name: offset
          schema:
            type: integer
          description: number of page (limit * offset)
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  book_id:
                    type: "string"
                  book_name:
                    type: "string"
                  description:
                    type: "string"
                  book_url:
                    type: "string"
                  file_path:
                    type: "string"
                  status:
                    type: "string"
                  author_name:
                    type: "string"
                  genre:
                    type: "string"
                  user:
                    type: "object"
                    properties:
                      user_id:
                        type: "string"
                      first_name:
                        type: "string"
                      last_name:
                        type: "string"
                      email:
                        type: "string"

  # public books filter
  /books/public/filter:
    get:
      tags:
        - "public books"
      summary: "filter public books by genres + pagination"
      parameters:
        - in: query
          name: genres
          schema:
            type: string
          description: filter by genres
        - in: query
          name: limit
          schema:
            type: integer
          description: number of limit of books to show
        - in: query
          name: offset
          schema:
            type: integer
          description: number of page (limit * offset)
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  book_id:
                    type: "string"
                  book_name:
                    type: "string"
                  description:
                    type: "string"
                  book_url:
                    type: "string"
                  file_path:
                    type: "string"
                  status:
                    type: "string"
                  author_name:
                    type: "string"
                  genre:
                    type: "string"
                  user:
                    type: "object"
                    properties:
                      user_id:
                        type: "string"
                      first_name:
                        type: "string"
                      last_name:
                        type: "string"
                      email:
                        type: "string"

  # ===========================
  # ===========================

  # 1) /auth
  /auth/signup:
    post:
      tags:
        - "Authentication"
      summary: "Signup"
      description: "Create a new user account and create a token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
                confirmPassword:
                  type: string
              required:
                - firstName
                - lastName
                - email
                - password
                - confirmPassword
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
                    properties:
                      user_id:
                        type: string
                      first_name:
                        type: string
                      last_name:
                        type: string
                      email:
                        type: string
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "409":
          description: "Conflict"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /auth/login:
    post:
      tags:
        - "Authentication"
      summary: "Login"
      description: "Login: Authenticate user and generate access token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      user_id:
                        type: string
                      first_name:
                        type: string
                      last_name:
                        type: string
                      email:
                        type: string
                  message:
                    type: string

        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  # Logout
  /auth/logout:
    get:
      tags:
        - "Authentication"
      summary: "Logout"
      description: "Logout: Clear user authentication token."
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  # 3) user
  # creat a new book
  /books/user/new:
    post:
      summary: "Create a new book"
      description: "To create a new book, you need to first login with endpoint `/auth/login` or signup with endpoint `/auth/signup`."
      tags:
        - "user"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                bookName:
                  type: string
                  description: "Name of the book"
                  example: ""
                  required: true
                description:
                  type: string
                  description: "Description of the book"
                  example: ""
                  required: true
                status:
                  type: string
                  description: "Status of the book (public or private) by default is public"
                  enum:
                    - "private"
                    - "public"
                  example: "public"
                genre:
                  type: string
                  description: "Genre of the book"
                  example: ""
                  required: true
                authorName:
                  type: string
                  description: "Name of the author"
                  example: ""
                  required: true
                bookUrl:
                  type: string
                  description: "URL of the book (google drive link or any link that can provide the book)"
                  example: ""
                bookFile:
                  type: string
                  format: binary
                  description: "Upload pdf file of the book"
      responses:
        200:
          description: "New book created"
          schema:
            type: "object"
            properties:
              book_id:
                type: "integer"
              book_name:
                type: "string"
              description:
                type: "string"
              book_url:
                type: "string"
              book_path:
                type: "string"
              status:
                type: "string"
              genre_id:
                type: "string"
              author_id:
                type: "string"
              user_id:
                type: "string"
        400:
          description: "Bad request"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        500:
          description: "Internal server error"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
